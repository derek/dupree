#!/usr/bin/php
<?
	// Create some globals
	global $args;

	// Parse the config file
	$sqlite_db = $_SERVER['HOME']. "/.dupree.db";
	
	// Parse the CLI input
	$args = parseOptions($_SERVER['argv']);
	$input = (file_get_contents('php://stdin'));
	
	// Generate the hash of the input
	$hash = md5($input);

	// Determine the table name for storage
	if (isset($args['n']))
	{
		// Prepend with 'ns_' to keep user defined namespaces seperate from any other possible tables in the DB. 
		$table = "ns_".preg_replace('`[^a-z0-9_]`i','',$args['n'][0]);
	}
	else
	{
		$table = "default_namespace";
	}
	
	// Spit out some variable values
	verbose("DB = {$sqlite_db}");
	if (!file_exists($sqlite_db))
		verbose("\tDB file doesn't exist. Will try to create.");
	verbose("Table = {$table}");
	verbose("Input = ".str_replace(array("\r\n", "\r", "\n"), '\n', $input));
	verbose("Hash = ".$hash);
	
	// Let's get it on!
	if ($db = new SQLiteDatabase($sqlite_db)) 
	{
		// First, determine if the destination table exists
		$sql = "SELECT 'true' FROM SQLite_Master WHERE name = '{$table}'";
		$table_exists = $db->query($sql)->fetchSingle();
		verbose("SQL = {$sql}");
		
		// It doesn't exist, so create it
		if ($table_exists != 'true')
		{
			verbose("Table ({$table}) doesn't exist, creating.");
			$sql = "CREATE TABLE {$table} (hash VARCHAR(32), message TEXT, date_created TIMESTAMP);";
			$db->queryExec($sql);
		}
		else
		{
			verbose("Table ({$table}) exists");
		}
	
		// Figure out how many times a specific message has been sent through before
		$sql = "SELECT count(*) FROM {$table} WHERE hash = '{$hash}'";
		verbose("SQL = {$sql}");
		$occurances = (int) $db->query($sql)->fetchSingle();
		$max_occurances = (int) isset($args['c'][0])?$args['c'][0]:1;
		
		// If it has been sent less times than the max allows
		if($occurances < $max_occurances)
		{
			verbose("Current count ({$occurances}) is under threshold ({$max_occurances}) for hash {$hash}");
			verbose("Inserting hash ({$hash})");
			$sql = "INSERT INTO {$table} (hash, message, date_created) VALUES ('{$hash}', '".sqlite_escape_string($input)."', datetime('now'))";
			verbose("SQL = {$sql}");
			$db->queryExec($sql);
			$return_input = true;
		}
		else
		{
			verbose("Current count ({$occurances}) is at or over threshold ({$max_occurances})");
			$return_input = false;
		}
	}
	else
	{
		// Something went wrong when creating the DB object
		$return_input = false;
	}
	
	// If we are going to return the stdin input
	if ($return_input)
	{	
		verbose("Return input = true");
		verbose("");
		echo $input;
	}
	else
	{
		verbose("Return input = false");
	}



// THE END =======================





function verbose($msg)
{
	if (isset($GLOBALS['args']['v']))
	{
		echo ": " . $msg , "\n";	
	}
}

function parseOptions($array)
{
	$len=sizeof($array);
	$currentName="";
	$options=array();

	for ($i = 1; $i < $len; $i++)
	{
		$name=$array[$i];
	
		if(strpos($name,"-")===0)
		{
			//is option
			$name=str_replace("-","",$name);   
			$currentName=$name;
			if($options[$currentName]==NULL)
			{
				$options[$currentName]=array();  
			}
		}
		else
		{
			$values=$options[$currentName];
			array_push($values,$name);
			$values = str_replace("\-", "-", $values);
			$options[$currentName]=$values;
		}
	}
	return $options;
}

?>
